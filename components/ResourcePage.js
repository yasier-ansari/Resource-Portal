'use client'

import { useRouter } from "next/navigation"
import { useEffect, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import Img from '@/public/blo.jpg'
import LogoRender from "./LogoRender";
import { db } from "@/util/firebase/config";
import { collection, getDocs, query, where } from 'firebase/firestore';
import { FiLink2 } from "react-icons/fi";
import { SlLocationPin } from 'react-icons/sl';


export async function getStaticPaths() {
    const infoCollection = collection(db, 'AltData');
    const infoQuery = query(infoCollection);
    const infoSnapshot = await getDocs(infoQuery);
    const infoData = infoSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
    }));

    // Generate paths for each title in the collection
    const paths = infoData.map((info) => ({
        params: { slug: info.title },
    }));

    return {
        paths,
        fallback: false,
    };
}


export async function getStaticProps({ params }) {
    const { slug } = params;
    let data;

    const infoCollection = collection(db, 'AltData');
    const infoQuery = query(infoCollection, where(`title`, `==`, slug));
    const infoSnapshot = await getDocs(infoQuery);
    const infoData = infoSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
    }));
    data = infoData;

    return {
        props: { data },
        revalidate: 5400,
    };
}


const ResourceBlog = ({ data }) => {
    const router = useRouter();
    const [info, setInfo] = useState(data);
    const slug = router.pathname;

    useEffect(() => {
        const getDataFromFire = async () => {
            if (!data) {
                const res = await getData(slug);
                setInfo(res);
            }
        }
        getDataFromFire();
    }, [slug]);
    const currentInfo = info[0];

    if (!currentInfo) {
        return <div>Info not found</div>;
    }
    return (
        <>
            <Head>
                <title>Resource Info Page</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className=" text-center mx-auto py-8 md:pt-12 max-w-[90rem] pb-12 md:pb-20 lg:pb-24 " >
                <h2 class="text-center mx-auto text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold lg:font-extrabold ">
                    {currentInfo.title}
                </h2>
                <p className="mb-4 md:mb-6 w-[80%] md:w-[70%] lg:w-[60%] mt-2 md:mt-4  lg:mt-6 mx-auto " >{currentInfo.subTitle}</p>
                <div className="flex flex-col space-y-6 justify-center place-content-center px-4 sm:px-8 md:px-20 lg:px-32 mb-12 md:mb-16 lg:mb-0 mx-auto ">
                    <div className="h-48 sm:h-56 md:h-64 lg:h-80  w-[90%] sm:w-[80%] md:w-[70%] lg:w-[55%] mx-auto rounded-[1.1rem] relative py-0 mt-0 " >
                        <Image src={Img} fill alt='non' className="rounded-[1.1rem] border-2 border-green-800/70 " sizes="(max-width: 768px) 100vw,
          (max-width: 1200px) 50vw,
          33vw" />
                    </div>
                    <div className="flex w-[90%] md:w-[70%] lg:w-[60%] mx-auto flex-wrap gap-2 justify-center " >
                        {
                            currentInfo.tags.map((el, k) => {
                                return (
                                    <>
                                        <span key={k} className="bg-orange-400 text-white shadow-lg shadow-black/25  text-sm px-2 py-1 md:px-3 font-semibold  rounded-lg ">{el}</span>
                                    </>
                                )
                            })
                        }
                    </div>
                    <p class=" px-3 sm:px-4 md:px-0 w-full md:w-[95%] lg:w-[90%] whitespace-pre-wrap pt-4 md:pt-6 prose mt-4 mb-6 font-medium text-base text-start lg:text-lg mx-auto">
                        {currentInfo.description}
                    </p>
                    <div class=" px-3 sm:px-4 md:px-0 text-start w-full md:w-[95%] lg:w-[90%] pt-2 md:pt-4 mx-auto font-medium text-base md:text-lg ">
                        <p className="text-gray-500 mb-2 " >Resources:</p>
                        <div class="flex flex-col space-y-3 lg:space-y-4 pl-4  ">
                            {
                                currentInfo.resourceUrl ?
                                    (
                                        <>
                                            {
                                                Object.keys(currentInfo.resourceUrl).map((el, k) => {
                                                    return (
                                                        <a href={currentInfo.resourceUrl[el]} div key={k} className="flex space-x-2 md:space-x-3 text-green-900/80 font-semibold items-center justify-start " >
                                                            < FiLink2 />
                                                            <p  >{el}</p>
                                                        </a>
                                                    )
                                                })
                                            }</>

                                    )
                                    :
                                    (
                                        <></>
                                    )
                            }
                        </div>
                    </div>
                    <div className=" px-3 sm:px-4 md:px-0 text-start w-full md:w-[95%] lg:w-[90%] pt-2 md:pt-4 mx-auto font-medium text-base md:text-lg  " >
                        <p className="text-gray-500 mb-2 " >Info:</p>
                        <div class="flex flex-col space-y-4 sm:space-y-6 md:space-y-0 justify-center md:flex-row md:justify-between md:items-start">
                            <div class="flex self-start   md:justify-center font-semibold  items-center space-x-2 md:space-x-3 ">
                                <SlLocationPin className="bg-black/60 fill-white stroke-2 px-2 py-2 rounded-full h-7 w-7 md:h-8 md:w-8 lg:h-9 lg:w-9 " />
                                <p className="text-green-900" >{currentInfo.country}</p>
                            </div>
                            <div class=" justify-between flex pt-4 sm:pt-5 md:pt-0 flex-wrap gap-2">
                                {
                                    Object.keys(currentInfo.mediaUrl).map((el, k) => {
                                        return (
                                            <>
                                                <LogoRender link={currentInfo.mediaUrl[el]} k={k} />
                                            </>
                                        )
                                    })
                                }
                            </div>
                        </div>
                    </div>

                </div>

            </div>
        </>
    )
}

export default ResourceBlog;